import HausdorffSchool.Common
import Mathlib.Topology.Instances.Real
import Mathlib.Analysis.NormedSpace.BanachSteinhaus

open Set Filter
open Topology Filter

variable {X : Type*} [MetricSpace X] (a b c : X)


/- The axioms of metric spaces: -/
#check (dist a b : ‚Ñù)
#check (dist_nonneg : 0 ‚â§ dist a b)
#check (dist_eq_zero : dist a b = 0 ‚Üî a = b)
#check (dist_comm a b : dist a b = dist b a)
#check (dist_triangle a b c : dist a c ‚â§ dist a b + dist b c)

/- Here are some examples of proving that functions are continuous -/
example {u : ‚Ñï ‚Üí X} {a : X} :
    Tendsto u atTop (ùìù a) ‚Üî ‚àÄ Œµ > 0, ‚àÉ N, ‚àÄ n ‚â• N, dist (u n) a < Œµ :=
  Metric.tendsto_atTop

example {X Y : Type*} [MetricSpace X] [MetricSpace Y] {f : X ‚Üí Y} :
    Continuous f ‚Üî
      ‚àÄ x : X, ‚àÄ Œµ > 0, ‚àÉ Œ¥ > 0, ‚àÄ x', dist x' x < Œ¥ ‚Üí dist (f x') (f x) < Œµ :=
  Metric.continuous_iff

example {X Y : Type*} [MetricSpace X] [MetricSpace Y] {f : X ‚Üí Y} (hf : Continuous f) :
    Continuous fun p : X √ó X ‚Ü¶ dist (f p.1) (f p.2) := by continuity

example {X Y : Type*} [MetricSpace X] [MetricSpace Y] {f : X ‚Üí Y} (hf : Continuous f) :
    Continuous fun p : X √ó X ‚Ü¶ dist (f p.1) (f p.2) :=
  continuous_dist.comp ((hf.comp continuous_fst).prod_mk (hf.comp continuous_snd))

example {X Y : Type*} [MetricSpace X] [MetricSpace Y] {f : X ‚Üí Y} (hf : Continuous f) :
    Continuous fun p : X √ó X ‚Ü¶ dist (f p.1) (f p.2) := by
  apply Continuous.dist
  exact hf.comp continuous_fst
  exact hf.comp continuous_snd

example {X Y : Type*} [MetricSpace X] [MetricSpace Y] {f : X ‚Üí Y} (hf : Continuous f) :
    Continuous fun p : X √ó X ‚Ü¶ dist (f p.1) (f p.2) :=
  (hf.comp continuous_fst).dist (hf.comp continuous_snd)

example {X Y : Type*} [MetricSpace X] [MetricSpace Y] {f : X ‚Üí Y} (hf : Continuous f) :
    Continuous fun p : X √ó X ‚Ü¶ dist (f p.1) (f p.2) :=
  hf.fst'.dist hf.snd'

/- It's your turn now to prove some continuity lemma. After trying the continuity tactic, you will need
``Continuous.add``, ``continuous_pow`` and ``continuous_id`` to do it by hand. -/
example {f : ‚Ñù ‚Üí X} (hf : Continuous f) : Continuous fun x : ‚Ñù ‚Ü¶ f (x ^ 2 + x) :=
  sorry

/- Some examples about balls, open sets and closed sets -/

variable (r : ‚Ñù)

example : Metric.ball a r = { b | dist b a < r } :=
  rfl

example : Metric.closedBall a r = { b | dist b a ‚â§ r } :=
  rfl

example (hr : 0 < r) : a ‚àà Metric.ball a r :=
  Metric.mem_ball_self hr

example (hr : 0 ‚â§ r) : a ‚àà Metric.closedBall a r :=
  Metric.mem_closedBall_self hr

example (s : Set X) : IsOpen s ‚Üî ‚àÄ x ‚àà s, ‚àÉ Œµ > 0, Metric.ball x Œµ ‚äÜ s :=
  Metric.isOpen_iff

example {s : Set X} : IsClosed s ‚Üî IsOpen (s·∂ú) :=
  isOpen_compl_iff.symm

example {s : Set X} (hs : IsClosed s) {u : ‚Ñï ‚Üí X} (hu : Tendsto u atTop (ùìù a))
    (hus : ‚àÄ n, u n ‚àà s) : a ‚àà s :=
  hs.mem_of_tendsto hu (eventually_of_forall hus)

example {s : Set X} : a ‚àà closure s ‚Üî ‚àÄ Œµ > 0, ‚àÉ b ‚àà s, a ‚àà Metric.ball b Œµ :=
  Metric.mem_closure_iff

/- Do the next exercise without using `mem_closure_iff_seq_limit` -/
example {u : ‚Ñï ‚Üí X} (hu : Tendsto u atTop (ùìù a)) {s : Set X} (hs : ‚àÄ n, u n ‚àà s) :
    a ‚àà closure s :=
  sorry

/- Here is the definition of a uniformly continuous function. -/
example {X : Type*} [MetricSpace X] {Y : Type*} [MetricSpace Y] {f : X ‚Üí Y} :
    UniformContinuous f ‚Üî
      ‚àÄ Œµ > 0, ‚àÉ Œ¥ > 0, ‚àÄ {a b : X}, dist a b < Œ¥ ‚Üí dist (f a) (f b) < Œµ :=
  Metric.uniformContinuous_iff

/-
In order to practice manipulating all those definitions, we will prove that continuous
functions from a compact metric space to a metric space are uniformly continuous
(we will see a more general version in a later section).

We will first give an informal sketch. Let ``f : X ‚Üí Y`` be a continuous function from
a compact metric space to a metric space.
We fix ``Œµ > 0`` and start looking for some ``Œ¥``.

Let ``œÜ : X √ó X ‚Üí ‚Ñù := fun p ‚Ü¶ dist (f p.1) (f p.2)`` and let ``K := { p : X √ó X | Œµ ‚â§ œÜ p }``.
Observe ``œÜ`` is continuous since ``f`` and distance are continuous.
And ``K`` is clearly closed (use ``isClosed_le``) hence compact since ``X`` is compact.

Then we discuss two possibilities using ``eq_empty_or_nonempty``.
If ``K`` is empty then we are clearly done (we can set ``Œ¥ = 1`` for instance).
So let's assume ``K`` is not empty, and use the extreme value theorem to choose ``(x‚ÇÄ, x‚ÇÅ)`` attaining the infimum
of the distance function on ``K``. We can then set ``Œ¥ = dist x‚ÇÄ x‚ÇÅ`` and check everything works.
-/

example {X : Type*} [MetricSpace X] [CompactSpace X]
      {Y : Type*} [MetricSpace Y] {f : X ‚Üí Y}
    (hf : Continuous f) : UniformContinuous f :=
  sorry

/- Let's talk about completeness and Cauchy sequences. -/
example (u : ‚Ñï ‚Üí X) :
    CauchySeq u ‚Üî ‚àÄ Œµ > 0, ‚àÉ N : ‚Ñï, ‚àÄ m ‚â• N, ‚àÄ n ‚â• N, dist (u m) (u n) < Œµ :=
  Metric.cauchySeq_iff

example (u : ‚Ñï ‚Üí X) :
    CauchySeq u ‚Üî ‚àÄ Œµ > 0, ‚àÉ N : ‚Ñï, ‚àÄ n ‚â• N, dist (u n) (u N) < Œµ :=
  Metric.cauchySeq_iff'

example [CompleteSpace X] (u : ‚Ñï ‚Üí X) (hu : CauchySeq u) :
    ‚àÉ x, Tendsto u atTop (ùìù x) :=
  cauchySeq_tendsto_of_complete hu

open BigOperators Finset Metric

/- We are ready for the final boss of this section: Baire's theorem for complete metric spaces!
The proof skeleton below shows interesting techniques. It uses the ``choose`` tactic in its exclamation
mark variant (you should experiment with removing this exclamation mark) and it shows how to
define something inductively in the middle of a proof using ``Nat.rec_on``.
-/

example [CompleteSpace X] (f : ‚Ñï ‚Üí Set X) (ho : ‚àÄ n, IsOpen (f n)) (hd : ‚àÄ n, Dense (f n)) :
    Dense (‚ãÇ n, f n) := by
  let B : ‚Ñï ‚Üí ‚Ñù := fun n ‚Ü¶ (1 / 2) ^ n
  have Bpos : ‚àÄ n, 0 < B n
  sorry
  /- Translate the density assumption into two functions `center` and `radius` associating
    to any n, x, Œ¥, Œ¥pos a center and a positive radius such that
    `closedBall center radius` is included both in `f n` and in `closedBall x Œ¥`.
    We can also require `radius ‚â§ (1/2)^(n+1)`, to ensure we get a Cauchy sequence later. -/
  have :
    ‚àÄ (n : ‚Ñï) (x : X),
      ‚àÄ Œ¥ > 0, ‚àÉ y : X, ‚àÉ r > 0, r ‚â§ B (n + 1) ‚àß closedBall y r ‚äÜ closedBall x Œ¥ ‚à© f n :=
    by sorry
  choose! center radius Hpos HB Hball using this
  intro x
  rw [mem_closure_iff_nhds_basis nhds_basis_closedBall]
  intro Œµ Œµpos
  /- `Œµ` is positive. We have to find a point in the ball of radius `Œµ` around `x`
    belonging to all `f n`. For this, we construct inductively a sequence
    `F n = (c n, r n)` such that the closed ball `closedBall (c n) (r n)` is included
    in the previous ball and in `f n`, and such that `r n` is small enough to ensure
    that `c n` is a Cauchy sequence. Then `c n` converges to a limit which belongs
    to all the `f n`. -/
  let F : ‚Ñï ‚Üí X √ó ‚Ñù := fun n ‚Ü¶
    Nat.recOn n (Prod.mk x (min Œµ (B 0)))
      fun n p ‚Ü¶ Prod.mk (center n p.1 p.2) (radius n p.1 p.2)
  let c : ‚Ñï ‚Üí X := fun n ‚Ü¶ (F n).1
  let r : ‚Ñï ‚Üí ‚Ñù := fun n ‚Ü¶ (F n).2
  have rpos : ‚àÄ n, 0 < r n := by sorry
  have rB : ‚àÄ n, r n ‚â§ B n := by sorry
  have incl : ‚àÄ n, closedBall (c (n + 1)) (r (n + 1)) ‚äÜ closedBall (c n) (r n) ‚à© f n := by
    sorry
  have cdist : ‚àÄ n, dist (c n) (c (n + 1)) ‚â§ B n := by sorry
  have : CauchySeq c := cauchySeq_of_le_geometric_two' cdist
  -- as the sequence `c n` is Cauchy in a complete space, it converges to a limit `y`.
  rcases cauchySeq_tendsto_of_complete this with ‚ü®y, ylim‚ü©
  -- this point `y` will be the desired point. We will check that it belongs to all
  -- `f n` and to `ball x Œµ`.
  use y
  have I : ‚àÄ n, ‚àÄ m ‚â• n, closedBall (c m) (r m) ‚äÜ closedBall (c n) (r n) := by sorry
  have yball : ‚àÄ n, y ‚àà closedBall (c n) (r n) := by sorry
  sorry
